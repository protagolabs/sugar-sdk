# AUTOGENERATED! DO NOT EDIT! File to edit: ../src/config.ipynb.

# %% auto 0
__all__ = ['SugarConfig']

# %% ../src/config.ipynb 3
import os
from .web3 import normalize_address
from typing import Literal

# %% ../src/config.ipynb 4
class SugarConfig:
    rpc_uri: str = os.getenv("SUGAR_RPC_URI", "https://optimism-mainnet.wallet.coinbase.com")
    sugar_contract_addr: str = os.getenv("SUGAR_CONTRACT_ADDR", "0x3B919747B46B13CFfd9f16629cFf951C0b7ea1e2")
    token_addr: str = normalize_address(os.getenv("SUGAR_TOKEN_ADDR", "0x9560e827aF36c94D2Ac33a39bCE1Fe78631088Db"))
    price_batch_size: int = int(os.getenv("SUGAR_PRICE_BATCH_SIZE","40"))
    protocol_name: Literal["velo", "aero"] = os.getenv("SUGAR_PROTOCOL_NAME","velo")
    pagination_limit: int = int(os.getenv("SUGAR_PAGINATION_LIMIT","2000"))

    
    
    # PRICE_ORACLE_ADDRESS=0xcA97e5653d775cA689BED5D0B4164b7656677011
    # CONNECTOR_TOKENS_ADDRESSES=0x9560e827aF36c94D2Ac33a39bCE1Fe78631088Db,0x4200000000000000000000000000000000000042,0x4200000000000000000000000000000000000006,0x8c6f28f2f1a3c87f0f938b96d27520d9751ec8d9,0x1f32b1c2345538c0c6f582fcb022739c4a194ebb,0xbfd291da8a403daaf7e5e9dc1ec0aceacd4848b9,0xc3864f98f2a61a7caeb95b039d031b4e2f55e0e9,0x9485aca5bbbe1667ad97c7fe7c4531a624c8b1ed,0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1
    # STABLE_TOKEN_ADDRESS=0x7F5c764cBc14f9669B88837ca1490cCa17c31607
    # GOOD_ENOUGH_PAGINATION_LIMIT=2000


    @staticmethod
    def get_config(): return SugarConfig()

    def __str__(self):
        # go over all attributes of self
        lines = ["üç≠ Sugar Config:","----------------"]
        attributes = [attr for attr in dir(self) if not attr.startswith('_')]
        for attr in attributes:
            if callable(getattr(self, attr)):  # Skip methods
                continue
            value = getattr(self, attr)
            lines.append(f"{attr}: {value}")
        return "\n".join(lines)
        
        
    def __repr__(self): return str(self)


# # token we are converting from
# price_oracle_address: str = os.environ["PRICE_ORACLE_ADDRESS"]
# # token we are converting to
# STABLE_TOKEN_ADDRESS = os.environ["STABLE_TOKEN_ADDRESS"]
# # connector tokens for the pricing oracle
# # see: https://github.com/velodrome-finance/oracle
# CONNECTOR_TOKENS_ADDRESSES = list(
#     map(
#         lambda a: normalize_address(a),
#         os.environ["CONNECTOR_TOKENS_ADDRESSES"].split(","),
#     )
# )
# # how often ticker bots update
# BOT_TICKER_INTERVAL_MINUTES = int(os.environ["BOT_TICKER_INTERVAL_MINUTES"])
# # caching time for sugar tokens calls
# SUGAR_TOKENS_CACHE_MINUTES = int(os.environ["SUGAR_TOKENS_CACHE_MINUTES"])
# # caching time for sugar liquidity pools calls
# SUGAR_LPS_CACHE_MINUTES = int(os.environ["SUGAR_LPS_CACHE_MINUTES"])
# # caching time for oracle price calls
# ORACLE_PRICES_CACHE_MINUTES = int(os.environ["ORACLE_PRICES_CACHE_MINUTES"])

# # pagination limit for pools
# POOL_PAGE_SIZE = 500

# # image shown on discord embeds for pool stats
# UI_POOL_STATS_THUMBNAIL = os.environ["UI_POOL_STATS_THUMBNAIL"]
